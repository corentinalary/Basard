xcarre <- A1^2 + A2^2
xcarre <- sort(xcarre)
X<- sqrt(xcarre)
n <- length(X)
plot(X[1:(n-1)]^2, log(1-seq(1:(n-1)/n)
abline(reg_ray)
xcarre <- A1^2 + A2^2
xcarre <- sort(xcarre)
X<- sqrt(xcarre)
n <- length(X)
plot(X[1:(n-1)]^2, log(1-seq(1:(n-1)/n)
abline(reg_ray)
plot(X[1:(n-1)]^2, log(1-seq(1:(n-1))/n))
X <- sqrt(A1^2 + A2^2)
X<- sort(X)
n <- length(X)
plot(X[1:(n-1)]^2, log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)]^2)
abline(reg_ray)
X <- sqrt(A1^2 + A2^2)
X<- sort(X)
n <- length(X)
plot(X[1:(n-1)]^2, log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~(X[1:(n-1)]^2))
abline(reg_ray)
X <- sort(A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
X <- sort(A1^2 + A2^2)
n <- length(X)
plot(X[1:n], log(1-seq(1:n)/n))
reg_ray<-lm(log(1-seq(1:n)/n)~X[1:n])
abline(reg_ray)
X <- sort(A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
X <- sort(A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
X <- sort(A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
source("histolarg.R")
source("histoeff.R")
vent<-read.table("vent.csv",sep=";",header=T)
attach(vent)
n<-length(A1)
histolarg(A1)
plot(A1[1:n-1],qnorm(seq(1:(n-1))/n))
reg1<-lm(qnorm(seq(1:(n-1))/n)~A1[1:(n-1)])
abline(reg1)
plot(A2[1:n-1],qnorm(seq(1:(n-1))/n))
reg2<-lm(qnorm(seq(1:(n-1))/n)~A2[1:(n-1)])
abline(reg2)
X <- sort(A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
X <- sort(A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
source("histolarg.R")
source("histoeff.R")
vent<-read.table("vent.csv",sep=";",header=T)
attach(vent)
n<-length(A1)
histolarg(A1)
histoeff(A1)
plot(A1[1:n-1],qnorm(seq(1:(n-1))/n))
reg1<-lm(qnorm(seq(1:(n-1))/n)~A1[1:(n-1)])
abline(reg1)
histolarg(A2)
histoeff(A2)
plot(A2[1:n-1],qnorm(seq(1:(n-1))/n))
reg2<-lm(qnorm(seq(1:(n-1))/n)~A2[1:(n-1)])
abline(reg2)
A<-c(A1, A2)
A<-sort(A)
n<-length(A)
reg<-lm(qnorm(seq(1:(n-1))/n)~A[1:(n-1)])
sigma<- 1/(reg$coefficients[2])
cat("estimation de sigma au carré : ", sigma^2,"\n")
X <- sort(A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
source("histolarg.R")
source("histoeff.R")
vent<-read.table("vent.csv",sep=";",header=T)
attach(vent)
n<-length(A1)
#Histogrammes de A1
histolarg(A1)
histoeff(A1)
#Graphe de probabilités pour la loi normale
plot(A1[1:n-1],qnorm(seq(1:(n-1))/n))
# Estimation de m et sigma^2 par le graphe de probabilités
reg1<-lm(qnorm(seq(1:(n-1))/n)~A1[1:(n-1)])
abline(reg1)
sigma1<- 1/(reg1$coefficients[2])
m1 <- -reg1$coefficients[1]/reg1$coefficients[2]
sigma1^2
m1
#Histogrammes de A2
histolarg(A2)
histoeff(A2)
#Graphe de probabilités pour la loi normale
plot(A2[1:n-1],qnorm(seq(1:(n-1))/n))
# Estimation de m et sigma^2 par le graphe de probabilités
reg2<-lm(qnorm(seq(1:(n-1))/n)~A2[1:(n-1)])
abline(reg2)
sigma2<- 1/(reg2$coefficients[2])
m2 <- -reg2$coefficients[1]/reg2$coefficients[2]
sigma2^2
m2
X <- sort(A1^2 + A2^2)
X <- (A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
X <- sort(A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
source("histolarg.R")
source("histoeff.R")
vent<-read.table("vent.csv",sep=";",header=T)
attach(vent)
n<-length(A1)
histolarg(A1)
histoeff(A1)
plot(A1[1:n-1],qnorm(seq(1:(n-1))/n))
reg1<-lm(qnorm(seq(1:(n-1))/n)~A1[1:(n-1)])
abline(reg1)
histolarg(A2)
histoeff(A2)
plot(A2[1:n-1],qnorm(seq(1:(n-1))/n))
reg2<-lm(qnorm(seq(1:(n-1))/n)~A2[1:(n-1)])
abline(reg2)
A<-c(A1, A2)
A<-sort(A)
n<-length(A)
reg<-lm(qnorm(seq(1:(n-1))/n)~A[1:(n-1)])
sigma<- 1/(reg$coefficients[2])
cat("estimation de sigma au carré : ", sigma^2,"\n")
source("histolarg.R")
source("histoeff.R")
vent<-read.table("vent.csv",sep=";",header=T)
attach(vent)
n<-length(A1)
#Graphe de probabilités pour la loi normale
plot(A1[1:n-1],qnorm(seq(1:(n-1))/n))
# Estimation de m et sigma^2 par le graphe de probabilités
reg1<-lm(qnorm(seq(1:(n-1))/n)~A1[1:(n-1)])
abline(reg1)
sigma1<- 1/(reg1$coefficients[2])
m1 <- -reg1$coefficients[1]/reg1$coefficients[2]
sigma1^2
m1
#Histogrammes de A2
histolarg(A2)
histoeff(A2)
#Graphe de probabilités pour la loi normale
plot(A2[1:n-1],qnorm(seq(1:(n-1))/n))
# Estimation de m et sigma^2 par le graphe de probabilités
reg2<-lm(qnorm(seq(1:(n-1))/n)~A2[1:(n-1)])
abline(reg2)
sigma2<- 1/(reg2$coefficients[2])
m2 <- -reg2$coefficients[1]/reg2$coefficients[2]
sigma2^2
m2
X <- sort(A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
X <- (A1^2 + A2^2)
X<- sort(X)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
source("histolarg.R")
source("histoeff.R")
vent<-read.table("vent.csv",sep=";",header=T)
attach(vent)
n<-length(A1)
histolarg(A1)
source("histolarg.R")
source("histoeff.R")
vent<-read.table("vent.csv",sep=";",header=T)
attach(vent)
n<-length(A1)
histolarg(A1)
histoeff(A1)
plot(A1[1:n-1],qnorm(seq(1:(n-1))/n))
reg1<-lm(qnorm(seq(1:(n-1))/n)~A1[1:(n-1)])
abline(reg1)
histolarg(A2)
histoeff(A2)
plot(A2[1:n-1],qnorm(seq(1:(n-1))/n))
reg2<-lm(qnorm(seq(1:(n-1))/n)~A2[1:(n-1)])
abline(reg2)
A<-c(A1, A2)
A<-sort(A)
n<-length(A)
reg<-lm(qnorm(seq(1:(n-1))/n)~A[1:(n-1)])
sigma<- 1/(reg$coefficients[2])
cat("estimation de sigma au carré : ", sigma^2,"\n")
X <- sort(A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
X <- (A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
X <- (A1^2 + A2^2)
X<- sort(X)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
X <- (A1^2 + A2^2)
X<- sort(X)
n <- length(X)
plot(X[1:n], log(1-seq(1:n)/n))
reg_ray<-lm(log(1-seq(1:n)/n)~X[1:n])
X <- sort(A1^2 + A2^2)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
X <- (A1^2 + A2^2)
X<- sort(X)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
sigma_carre <- -1/(reg_ray$coefficients[2])
sigma_carre
abline(reg_ray)
sigma_carre <- -1/(2*reg_ray$coefficients[2])
sigma_carre
sigma_carre <- -1/(2*reg_ray$coefficients[1])
sigma_carre
sigma1^2
m1
# Estimation de m et sigma^2 par le graphe de probabilités
reg2<-lm(qnorm(seq(1:(n-1))/n)~A2[1:(n-1)])
abline(reg2)
sigma2<- 1/(reg2$coefficients[2])
m2 <- -reg2$coefficients[1]/reg2$coefficients[2]
sigma2^2
m2
X <- (A1^2 + A2^2)
X<- sort(X)
n <- length(X)
plot(X[1:(n-1)], log(1-seq(1:(n-1))/n))
reg_ray<-lm(log(1-seq(1:(n-1))/n)~X[1:(n-1)])
abline(reg_ray)
sigma_carre <- -1/(2*reg_ray$coefficients[2])
sigma_carre
tinytex::reinstall_tinytex()
sigma_carre <- -1/(2*reg_ray$coefficients[2])
sigma_carre
cat(estimateur1, "\n")
#######################Partie 2################
source("simu_rayleigh.R")
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(100, 100, 1)
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(100, 100, 1)
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(5, 1000, 1)
compare_estimateurs(1, 1000, 1)
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
pourcentage_rayleigh(0.05, 100, 100, 1)
#######################Partie 2################
source("simu_rayleigh.R")
pourcentage_rayleigh(0.05, 100, 100, 1)
pourcentage_rayleigh(0.05, 1000, 100, 1)
#######################Partie 2################
source("simu_rayleigh.R")
pourcentage_rayleigh(0.01, 1000, 100, 1)
#######################Partie 2################
source("simu_rayleigh.R")
pourcentage_rayleigh(0.01, 1000, 100, 1)
#######################Partie 2################
source("simu_rayleigh.R")
pourcentage_rayleigh(0.01, 1000, 100, 1)
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1000, 1000, 40)
compare_estimateurs(1, 1000, 40)
compare_estimateurs(1, 1000, 40)
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1, 1000, 40)
#######################Partie 2################
source("simu_rayleigh.R")
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1, 1000, 40)
compare_estimateurs(1, 1000, 1)
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1, 1000, 1)
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1, 1000, 1)
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1, 1000, 10)
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1, 1000, 10)
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1, 1000, 10)
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1, 1000, 10)
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1000, 1000, 10)
source('~/CorrectionsStat/script_f4e1.R')
source('~/CorrectionsStat/script_f4e1.R')
dur<-c(91.6, 35.7, 251.3, 24.3, 5.4, 67.3, 170.9, 9.5, 118.4, 57.1)
n=length(dur)
#Estimateur du Maximum de Vraisemblance
(EMV<-1/mean(dur))
#Estimateur optimal
(Eopt<-(n-1)/sum(dur))
#intervalles de confiance
alpha=0.01
qchisq(alpha/2,2*n)/2/sum(dur)
qchisq(1-alpha/2,2*n)/2/sum(dur)#pour le bilateral
qchisq(1-alpha,2*n)/2/sum(dur)#pour le supérieur
qchisq(alpha,2*n)/2/sum(dur)#pour l'inférieur
alpha=0.05
qchisq(alpha/2,2*n)/2/sum(dur)
qchisq(1-alpha/2,2*n)/2/sum(dur)#pour le bilateral
qchisq(1-alpha,2*n)/2/sum(dur)#pour le supérieur
qchisq(alpha,2*n)/2/sum(dur)#pour l'inférieur
alpha= 0.1
qchisq(alpha/2,2*n)/2/sum(dur)
qchisq(1-alpha/2,2*n)/2/sum(dur)#pour le bilateral
qchisq(1-alpha,2*n)/2/sum(dur)#pour le supérieur
qchisq(alpha,2*n)/2/sum(dur)#pour l'inférieur
alpha=0.5
qchisq(alpha/2,2*n)/2/sum(dur)
qchisq(1-alpha/2,2*n)/2/sum(dur)#pour le bilateral
qchisq(1-alpha,2*n)/2/sum(dur)#pour le supérieur
qchisq(alpha,2*n)/2/sum(dur)#pour l'inférieur
#Pourcentage
source("Pourcentage.R")
Pourcentage(1000,1000,0.01,10)
Pourcentage(1000,1000,0.05,10)
Pourcentage(1000,1000,0.1,10)
Pourcentage(1000,1000,0.5,10)
Pourcentage(1000,10,0.01,10)
Pourcentage(1000,10,0.05,10)
Pourcentage(1000,10,0.1,10)
Pourcentage(1000,10,0.5,10)
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1000, 1000, 10)
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1000, 1000, 10)
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1000, 1000, 1)
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1000, 1000, 1)
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1000, 10, 1)
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(10, 10, 1)
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(10, 10, 40)
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(10, 100, 40)
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(10, 1000, 40)
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1000, 1000, 40)
source('~/tpStat2/tpStat2/tpStat2.R', echo=TRUE)
source('~/tpStat2/tpStat2/tpStat2.R', echo=TRUE)
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1000,5,10)
compare_estimateurs(1000,50,10)
compare_estimateurs(1000,500,10)
compare_estimateurs(1000,5000,10)
errquad1
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
source('~/tpStat2/tpStat2/simu_rayleigh.R')
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1000,5,10)
compare_estimateurs(1000,50,10)
compare_estimateurs(1000,500,10)
compare_estimateurs(1000,5000,10)
#######################Partie 2################
source("simu_rayleigh.R")
compare_estimateurs(1000,5,10)
X_carre <- A1^2 + A2^2
X <- sqrt(X_carre)
X<-sort(X)
n <- length(X)
2/(4-pi)*((n-1)/n)*var(X)
2/(4-pi)*var(X)
(1/2*n)*sum(X^2)
sum(X_carre)/(2*n)
A1_simu <-rnorm(n, 0, sigma)
A1_simu_carre <-A1^2
A2_simu <- rnorm(n, 0, sigma)
A2_simu_carre<- A2^2
X_simu_carre<-A1carre + A2carre
A1_simu <-rnorm(n, 0, sigma)
A1_simu_carre <-A1^2
A2_simu <- rnorm(n, 0, sigma)
A2_simu_carre<- A2^2
X_simu_carre<-A1_simu_carre + A2_simu_carre
X_simu<-sqrt(X_simu_carre)
X_simu
somme = 0
for (i in 1:100){
somme <- somme + X[i]**2
}
borneinf <- somme / qchisq(1 - 0.05/2, 200)
bornesup <- somme / qchisq(0.05/2, 200)
print(borneinf)
print(bornesup)
sigma_carre_chapeau<-sum(X_carre)/(2*n)
sigma_carre_chapeau
sigma_0_carre = 2 / pi * 81
stat = 2*100 / sigma_0_carre * sigma_carre_chapeau
quant = qchisq(0.95, 2*100)
cat("stat = ", stat, "quantile = ", quant)
