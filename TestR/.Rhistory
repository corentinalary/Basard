# Visualisation de la densité d'une loi normale
m<-2
sigma<-1
curve(dnorm(x,m,sigma),-12,12, col="blue")
# On change la moyenne
m<--3
curve(dnorm(x,m,sigma),add=T, col="red")
# On change la variance
sigma<-3
curve(dnorm(x,m,sigma),add=T, col="green")
# Même chose avec la fonction de répartition
m<-2
sigma<-1
curve(pnorm(x,m,sigma),-12,12, col="blue")
pnorm(0,m,sigma)
m<--3
curve(pnorm(x,m,sigma),add=T, col="red")
pnorm(0,m,sigma)
sigma<-3
curve(pnorm(x,m,sigma),add=T, col="green")
pnorm(0,m,sigma)
# Loi normale centrée-réduite
m<-0
sigma<-1
curve(dnorm(x,m,sigma),-4,4)
pnorm(0)
lines(c(0,0),c(0,dnorm(0)),col="red",lwd=2)
pnorm(1.25)
lines(c(1.25,1.25),c(0,dnorm(1.25)),col="blue",lwd=2)
pnorm(1)
1-pnorm(1)
pnorm(-1)
qnorm(1-0.05/2)
qnorm(1-0.25/2)
curve(dnorm(x,m,sigma),-4,4)
lines(c(qnorm(1-0.05/2),qnorm(1-0.05/2)),c(0,dnorm(qnorm(1-0.05/2))),col="blue",lwd=2)
lines(c(-qnorm(1-0.05/2),-qnorm(1-0.05/2)),c(0,dnorm(qnorm(1-0.05/2))),col="blue",lwd=2)
# Visualisation de la densité d'une loi normale
m<-2
sigma<-1
curve(dnorm(x,m,sigma),-12,12, col="blue")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(curve(dnorm(x,m,sigma),-12,12, col="blue"))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(curve(dnorm(x,m,sigma),-12,12, col="blue"))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
source('~/Téléchargements/fiche1exo2.R', echo=TRUE)
# Création du vecteur des données.
tremb<-c(0.516, 0.887, 0.783, 0.613, 0.697, 0.459, 0.724, 0.755, 0.867, 0.893, 0.835, 0.718, 0.851, 0.386, 0.855)
# Lecture des données.
tremb
tremb[2]
# Taille du vecteur.
n<-length(tremb)
n
# Données ordonnées.
trembord<-sort(tremb)
trembord
# Histogramme avec le paramétrage par défaut de R.
hist(tremb)
# Histogramme à classes de même largeur suivant les
# règles du cours.
# La règle de Sturges donne k = 5 classes.
# Calcul des bornes inférieure et supérieure.
a0<-trembord[1]-0.025*(trembord[n]-trembord[1])
a5<-trembord[n]+0.025*(trembord[n]-trembord[1])
a0
a5
# Largeur des classes
h<-(a5-a0)/5
h
# Bornes des classes : on partage [a0,a5] en 5 intervalles
# de largeur h.
bornes<-seq(a0,a5,h)
bornes
# Histogramme corespondant.
hist(tremb, prob=T, breaks=bornes)
# Même chose en couleur avec des limites aux axes.
hist(tremb, prob=T, breaks=bornes,col="blue", xlim=c(0,1), ylim=c(0,4))
# Pour avoir 2 figures dans la même fenêtre, sur une ligne et 2 colonnes.
par(mfcol=c(1,2))
hist(tremb)
hist(tremb, prob=T, breaks=bornes,col="red")
# Même chose avec 2 lignes et une colonne.
par(mfcol=c(2,1))
hist(tremb)
hist(tremb, prob=T, breaks=bornes,col="green")
# Lecture des données.
tremb
tremb[2]
# Taille du vecteur.
n<-length(tremb)
n
# Données ordonnées.
trembord<-sort(tremb)
trembord
# Histogramme avec le paramétrage par défaut de R.
hist(tremb)
# Histogramme à classes de même largeur suivant les
# règles du cours.
# La règle de Sturges donne k = 5 classes.
# Calcul des bornes inférieure et supérieure.
a0<-trembord[1]-0.025*(trembord[n]-trembord[1])
a5<-trembord[n]+0.025*(trembord[n]-trembord[1])
a0
a5
# Largeur des classes
h<-(a5-a0)/5
h
# Bornes des classes : on partage [a0,a5] en 5 intervalles
# de largeur h.
bornes<-seq(a0,a5,h)
bornes
# Histogramme corespondant.
hist(tremb, prob=T, breaks=bornes)
You can also embed plots, for example:
plot(curve(dnorm(x,m,sigma),-12,12, col="blue"))
## Including Plots
m<-2
sigma<-1
m
sigma
## Including Plots
m<-2
sigma<-1
m
sigma
You can also embed plots, for example:
plot(curve(dnorm(x,m,sigma),-12,12, col="blue"))
plot(curve(dnorm(x,m+1,sigma),-12,12, col="blue"))
knitr::opts_chunk$set(echo = TRUE)
plot(curve(dnorm(x,m+1,sigma),-12,12, col="blue"))
m<-2
sigma<-1
m
sigma
tremb <-c(8,2,3,6)
tremb
tremb <-c(8,2,3,6)
tremb
tremp<-sort(tremb)
tremb
tremb <-c(8,2,3,6)
tremb
tremb<-sort(tremb)
tremb
knitr::opts_chunk$set(echo = TRUE)
m<-2
sigma<-1
m
sigma
curve(dnorm(x,m,sigma),add=T, col="red")
tremb <-c(8,2,3,6)
tremb
m<-3
sigma<-1
m
sigma
curve(dnorm(x,m,sigma),add=T, col="red")
# Visualisation de la densité d'une loi normale
m<-2
sigma<-1
curve(dnorm(x,m,sigma),-12,12, col="blue")
m<-3
sigma<-1
m
sigma
curve(dnorm(x,m,sigma),-8,8, col="blue")
m<-2
sigma<-1
m
sigma
curve(dnorm(x,m,sigma),-8,8, col="blue")
m<-1
sigma<-1
m
sigma
curve(dnorm(x,m,sigma),-8,8, col="blue")
m<-10
sigma<-1
m
sigma
curve(dnorm(x,m,sigma),-8,8, col="blue")
m<-5
sigma<-1
m
sigma
curve(dnorm(x,m,sigma),-8,8, col="blue")
m<-5
sigma<-2
m
sigma
curve(dnorm(x,m,sigma),-8,8, col="blue")
m<-5
sigma<-0.5
m
sigma
curve(dnorm(x,m,sigma),-8,8, col="blue")
m<-1
sigma<-
m
sigma
curve(dnorm(x,m,sigma),-8,8, col="blue")
m<-1
sigma<-3
m
sigma
curve(dnorm(x,m,sigma),-8,8, col="blue")
# Création du vecteur des données.
tremb<-c(0.516, 0.887, 0.783, 0.613, 0.697, 0.459, 0.724, 0.755, 0.867, 0.893, 0.835, 0.718, 0.851, 0.386, 0.855)
# Lecture des données.
tremb
tremb[2]
# Taille du vecteur.
n<-length(tremb)
n
# Données ordonnées.
trembord<-sort(tremb)
trembord
# Histogramme avec le paramétrage par défaut de R.
hist(tremb)
# Histogramme à classes de même largeur suivant les
# règles du cours.
# La règle de Sturges donne k = 5 classes.
# Calcul des bornes inférieure et supérieure.
a0<-trembord[1]-0.025*(trembord[n]-trembord[1])
a5<-trembord[n]+0.025*(trembord[n]-trembord[1])
a0
a5
# Largeur des classes
h<-(a5-a0)/5
h
# Bornes des classes : on partage [a0,a5] en 5 intervalles
# de largeur h.
bornes<-seq(a0,a5,h)
bornes
# Histogramme corespondant.
hist(tremb, prob=T, breaks=bornes)
# Histogramme corespondant.
hist(tremb, prob=T, breaks=bornes)
# Même chose en couleur avec des limites aux axes.
hist(tremb, prob=T, breaks=bornes,col="blue", xlim=c(0,1), ylim=c(0,4))
# Histogramme corespondant.
hist(tremb, prob=T, breaks=bornes)
# Même chose en couleur avec des limites aux axes.
hist(tremb, prob=T, breaks=bornes,col="blue", xlim=c(0,1), ylim=c(0,4))
# Histogramme corespondant.
hist(tremb, prob=T, breaks=bornes)
# Même chose en couleur avec des limites aux axes.
hist(tremb, prob=T, breaks=bornes,col="blue", xlim=c(0,1), ylim=c(0,4))
# Histogramme corespondant.
hist(tremb, prob=T, breaks=bornes)
# Histogramme corespondant.
hist(tremb, breaks=bornes)
# Histogramme corespondant.
hist(tremb, breaks=bornes)
# Histogramme corespondant.
hist(tremb, prob=T, breaks=bornes)
# Même chose en couleur avec des limites aux axes.
hist(tremb, prob=T, breaks=bornes,col="blue", xlim=c(0,1), ylim=c(0,4))
# Pour avoir 2 figures dans la même fenêtre, sur une ligne et 2 colonnes.
par(mfcol=c(1,2))
hist(tremb)
hist(tremb, prob=T, breaks=bornes,col="red")
# Même chose avec 2 lignes et une colonne.
par(mfcol=c(2,1))
hist(tremb)
hist(tremb, prob=T, breaks=bornes,col="green")
# Retour à une seule figure par fenêtre.
par(mfcol=c(1,1))
# Histogramme à classes de même effectif
b<-c(3,6,9,12)
bornes<-c(a0,(trembord[b]+trembord[b+1])/2,a5)
histtremb<-hist(tremb, prob=T, breaks=bornes)
# Même chose en utilisant les quantiles empiriques
bornes<-c(a0,quantile(tremb,seq(1/5,4/5,1/5)),a5)
histtremb<-hist(tremb, prob=T, breaks=bornes)
histolarg <- function(x, xlim=NULL, col=NULL,...)
{
# nombre de données
n <- length(x)
# nombre de classes (règle de Sturges)
if (n<12) k<-5 else k <- round(log2(n)+1)
# bornes des classes
rangex <- max(x)-min(x)
a0 <- min(x)-0.025*rangex
ak <- max(x)+0.025*rangex
bornes <- seq(a0, ak, length=k+1)
# étendue du tracé
if (is.null(xlim))
xlim<-c(bornes[1], bornes[k+1])
# histogramme
histx<-hist(x, prob=T, col=col, breaks=bornes, xlim=xlim, ...)
# histx
}
# Appel de la fonction.
histolarg(tremb)
histolarg(tremb, col="red", xlim=c(0,1))
histolarg(tremb, col=4)
histolarg(tremb, xlim=c(0,1))
histoeff <- function(x, xlim=NULL, col=NULL, ...)
{
sx <- sort(x)
n <- length(x)
k <- round(log(n)/log(2)+1)
rangex <- max(x)-min(x)
breaks <- c(min(x)-0.025*rangex, quantile(x, seq(1, k-1)/k), max(x)+0.025*rangex)
col <- 0
if (is.null(xlim)) xlim<-c(breaks[1], breaks[k+1])
hist(x, breaks=breaks, col=col, xlim=xlim, probability=T, ...)
}
histoeff(tremb)
# Fonction de répartition empirique.
plot(ecdf(tremb))
par(mfcol=c(1,2))
# Graphe de probabilités pour la loi uniforme.
plot(trembord,seq(1:n)/n)
# Graphe de probabilités pour la loi puissance.
plot(log(trembord),log(seq(1:n)/n))
# Superposition de la droite des moindres carrés pour la loi puissance.
abs<-log(trembord)
ord<-log(seq(1:n)/n)
reg<-lm(ord~abs)
lines(abs, fitted.values(reg))
# Estimation graphique des paramètres.
reg$coefficients
c<-reg$coefficients[2]
c
theta<-exp(-reg$coefficients[1]/reg$coefficients[2])
theta
## Including Plots
tremb<_c(0.516, 0.887,  0.783, 0.613, 0.697, 0.459, 0.724, 0.755,
0.867, 0.893, 0.835, 0.718, 0.851, 0.386, 0.855)
tremb
tremb<_c(0.516, 0.887,  0.783, 0.613, 0.697, 0.459, 0.724, 0.755, 0.867, 0.893, 0.835, 0.718, 0.851, 0.386, 0.855)
tremb
## Including Plots
tremb<_c(0.516, 0.887,  0.783, 0.613, 0.697, 0.459, 0.724, 0.755, 0.867, 0.893, 0.835, 0.718, 0.851, 0.386, 0.855)
tremb
tremb<_c(0.516, 0.887,  0.783, 0.613, 0.697, 0.459, 0.724, 0.755, 0.867, 0.893, 0.835, 0.718, 0.851, 0.386, 0.855)
tremb
k<-5
k
## Including Plots
tremb<_c(0.516, 0.887,  0.783, 0.613, 0.697, 0.459, 0.724, 0.755, 0.867, 0.893, 0.835, 0.718, 0.851, 0.386, 0.855)
tremb<-sort(tremb)
tremb
## Including Plots
tremb<-c(0.516, 0.887,  0.783, 0.613, 0.697, 0.459, 0.724, 0.755, 0.867, 0.893, 0.835, 0.718, 0.851, 0.386, 0.855)
tremb<-sort(tremb)
tremb
n<-length(tremb)
a0<-trembord[1]-0.025*(trembord[n]-trembord[1])
a5<-trembord[n]+0.025*(trembord[n]-trembord[1])
h<-(a5-a0)/5
h
bornes<-seq(a0,a5,h)
bornes
hist(tremb, prob=T, breaks=bornes)
hist(tremb, prob=T, breaks=bornes)
hist(tremb, prob=T, breaks=bornes)
hist(tremb, prob=T, breaks=bornes)
hist(tremb, prob=T, breaks=bornes)
hist(tremb, prob=T, breaks=bornes)
hist(tremb, prob=T, breaks=bornes)
hist(tremb, prob=T, breaks=bornes)
hist(tremb, prob=T, breaks=bornes)
hist(tremb, prob=T, breaks=bornes)
# Même chose avec 2 lignes et une colonne.
par(mfcol=c(2,1))
hist(tremb)
hist(tremb, prob=T, breaks=bornes,col="green")
# Retour à une seule figure par fenêtre.
par(mfcol=c(1,1))
# Histogramme à classes de même effectif
b<-c(3,6,9,12)
bornes<-c(a0,(trembord[b]+trembord[b+1])/2,a5)
histtremb<-hist(tremb, prob=T, breaks=bornes)
# Histogramme à classes de même effectif
b<-c(3,6,9,12)
bornes<-c(a0,(trembord[b]+trembord[b+1])/2,a5)
# Même chose avec 2 lignes et une colonne.
par(mfcol=c(2,1))
hist(tremb)
hist(tremb, prob=T, breaks=bornes,col="green")
# Retour à une seule figure par fenêtre.
par(mfcol=c(1,1))
# Histogramme à classes de même effectif
b<-c(3,6,9,12)
bornes<-c(a0,(trembord[b]+trembord[b+1])/2,a5)
histtremb<-hist(tremb, prob=T, breaks=bornes)
---
title: "tp MNB"
output: pdf_document
---
<!-- ### Question 1 : -->
### Question 3 :
```{python}
def euler_explicite(y0, h):
Y = []
N = T/h
Y.append(y0)
### Question 3 :
```{python}
def euler_explicite(y0, h):
Y = []
N = T/h
Y.append(y0)
n<- 25
alpha <- 0.05
a <- (n*0.08^2)/qchisq(1-alpha/2, n-1)
b <- (n*0.08^2)/qchisq(alpha/2, n-1)
a
b
n<- 25
alpha <- 0.05
(n-1)*0.08^2/0.1^2
n<- 25
alpha <- 0.05
(n-1)*0.08^2/0.1^2
qchisq(alpha, n-1 )
ech <- c(19.3, 16.4, 35.9, 5.8, 47.0, 3.9, 30.4, 15.1, 2.6, 20.1)
ech <- sort(ech)
ech
ech <- c(19.3, 16.4, 35.9, 5.8, 47.0, 3.9, 30.4, 15.1, 2.6, 20.1)
ech <- sort(ech)
summary(ech)
ech <- c(19.3, 16.4, 35.9, 5.8, 47.0, 3.9, 30.4, 15.1, 2.6, 20.1)
ech <- sort(ech)
lambda_est <- mean(ech)
lambda_est
lambda_est <- 1/mean(ech)
lambda_est
setwd("~/TestR")
source("histolarg_mine.R")
source("histoeff_corr_f1e2.R")
ech <- c(75, 265, 225, 402, 35, 105, 411, 346, 159, 229, 62, 256, 431, 177, 56, 144, 354, 178, 386, 294)
ech <- sort(ech)
source("histolarg_mine.R")
source("histoeff_corr_f1e2.R")
ech <- c(75, 265, 225, 402, 35, 105, 411, 346, 159, 229, 62, 256, 431, 177, 56, 144, 354, 178, 386, 294)
ech <- sort(ech)
histolarg(ech)
histoeff(ech)
(1 - pt(sqrt(n)*(81.6-80)/7))/2
(1 - pt(n , sqrt(n)*(81.6-80)/7))/2
(1 - pt(n-1 , sqrt(n)*(81.6-80)/7))
n<-100
1 - pt(n-1 , (sqrt(n)*(81.6-80)/7))
n<-100
1 - pt(99 , (sqrt(n)*(81.6-80)/7))
t.test(ech)
n<-100
1 - pt(n-1 , (sqrt(n)*(81.6-80)/7))
n<-100
1 - pt((sqrt(n)*(81.6-80)/7), n-1)
